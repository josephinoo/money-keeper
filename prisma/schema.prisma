// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  login String  @unique
  name  String?

  password UserPassword?
  settings UserSettings?
  tokens   AuthToken[]
  groups   UserToGroup[]

  outgoingInvites  Invite[] @relation("outgoingInvites")
  incommingInvites Invite[] @relation("incommingInvites")

  blocksUsers    BlockList[] @relation("blocks")
  blockedByUsers BlockList[] @relation("blockedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPassword {
  userId Int    @id
  hash   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  userId Int @id

  theme    String?
  language String?
  currency String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuthToken {
  id          Int     @id @default(autoincrement())
  value       String  @unique
  userId      Int
  groupId     Int?
  invalidated Boolean @default(false)

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group? @relation(fields: [groupId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
}

model UserToGroup {
  userId  Int
  groupId Int
  order   Int @default(0)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
}

model Invite {
  id           Int     @id @default(autoincrement())
  senderId     Int
  receiverId   Int?
  receiverInfo String
  accepted     Boolean
  rejected     Boolean

  sender   User  @relation(name: "outgoingInvites", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User? @relation(name: "incommingInvites", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model BlockList {
  userId        Int
  blockedUserId Int

  user        User @relation(name: "blocks", fields: [userId], references: [id], onDelete: Cascade)
  blockedUser User @relation(name: "blockedBy", fields: [blockedUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([userId, blockedUserId])
}

model Group {
  id   Int    @id @default(autoincrement())
  name String

  users         UserToGroup[]
  accounts      Account[]
  categories    Category[]
  transactions  Transaction[]
  tokens        AuthToken[]
  tags          Tag[]
  importRules   ImportRule[]
  currencyRates CurrencyRate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id       Int     @id @default(autoincrement())
  ownerId  Int
  name     String
  currency String
  icon     String?
  color    String?
  order    Int     @default(0)

  owner        Group         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id      Int     @id @default(autoincrement())
  ownerId Int?
  name    String
  icon    String?
  color   String?
  type    String
  order   Int     @default(0)

  owner        Group?        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  importRules  ImportRule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id                  Int      @id @default(autoincrement())
  ownerId             Int
  accountId           Int
  categoryId          Int
  linkedTransactionId Int?     @unique
  date                DateTime
  amount              Float
  comment             String?

  owner    Group    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  account  Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  tags Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id      Int    @id @default(autoincrement())
  ownerId Int
  name    String

  owner Group @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  transactions Transaction[]
  importRules  ImportRule[]
}

model ImportRule {
  id         Int    @id @default(autoincrement())
  ownerId    Int
  text       String
  categoryId Int?

  owner    Group     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])
  tags     Tag[]
}

model CurrencyRate {
  id      Int @id @default(autoincrement())
  ownerId Int

  cur1 String
  cur2 String
  rate Float

  owner Group @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

// Version 2

model Member {
  uuid  String  @id @default(uuid())
  login String?

  publicKey   String
  ecryptedKey String?

  journal JournalOperation[]
}

model JournalOperation {
  ownerUuid String
  order     Int
  data      String

  owner Member @relation(fields: [ownerUuid], references: [uuid], onDelete: Cascade)

  @@id([ownerUuid, order])
}
